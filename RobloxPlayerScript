-- Загрузка Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Создание основного окна
local Window = Rayfield:CreateWindow({
    Name = "Click Simulator",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Default",
    ConfigurationSaving = {
        Enabled = true,
        FileName = "Big Hub"
    },
    KeySystem = false
})

-- Переменные игрока и управления
local Player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Camera = workspace.CurrentCamera

local currentSpeed = 16
local currentJump = 50
local isWallSpeedActive = false
local isJumpPowerActive = false
local isInfinityJumpActive = false
local isNoClipActive = false
local isFlyActive = false
local Flying = false
local Flymoving = Instance.new("BoolValue")
Flymoving.Name = "Flymoving"

local BodyVelocity = nil
local BodyGyro = Instance.new("BodyGyro")
BodyGyro.D = 500
BodyGyro.P = 3000
BodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)

-- Создаём вкладки
local PlayerTab = Window:CreateTab("Player")
local MainTab = Window:CreateTab("Main")

-- Функция для вычисления направления
local function calculateDirection()
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChild("Humanoid")
    if not Humanoid or Humanoid.MoveDirection == Vector3.zero then
        return Vector3.zero
    end

    local camDir = Camera.CFrame.LookVector
    local moveDir = Humanoid.MoveDirection
    local flatDir = Vector3.new(camDir.X, 0, camDir.Z).Unit
    return (flatDir * moveDir.Z + Camera.CFrame.RightVector * moveDir.X).Unit
end

-- Включение/выключение NoClip
local function toggleNoClip(state)
    isNoClipActive = state
    local character = Player.Character
    if character then
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = not state
            end
        end
    end
end

-- Включение/выключение полета
local function toggleFly(state)
    isFlyActive = state
    local Character = Player.Character
    if not Character then return end

    local Humanoid = Character:FindFirstChild("Humanoid")
    local RootPart = Character:FindFirstChild("HumanoidRootPart")

    if isFlyActive then
        -- Включение полета
        if RootPart then
            BodyVelocity = Instance.new("BodyVelocity")
            BodyVelocity.MaxForce = Vector3.new(100000000, 100000000, 100000000)
            BodyVelocity.Velocity = Vector3.zero
            BodyVelocity.P = 20000
            BodyVelocity.Parent = RootPart
        end
        BodyGyro.Parent = RootPart
    else
        -- Отключение полета
        Flymoving.Value = false
        if BodyVelocity then BodyVelocity:Destroy() end
        BodyGyro:Destroy()
    end
end

-- Включение бесконечного прыжка
local function toggleInfinityJump(state)
    isInfinityJumpActive = state
    if isInfinityJumpActive then
        UIS.JumpRequest:Connect(function()
            if isInfinityJumpActive then
                local Character = Player.Character
                local Humanoid = Character and Character:FindFirstChild("Humanoid")
                if Humanoid then
                    Humanoid:ChangeState("Jumping")
                end
            end
        end)
    end
end

-- Функция обновления скорости
local function updateWalkSpeed(newSpeed)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChild("Humanoid")
    if Humanoid then
        currentSpeed = newSpeed
        Humanoid.WalkSpeed = tonumber(newSpeed) or currentSpeed
    end
end

-- Функция обновления силы прыжка
local function updateJumpPower(newJump)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChild("Humanoid")
    if Humanoid then
        currentJump = newJump
        Humanoid.JumpPower = tonumber(newJump) or currentJump
    end
end

-- Обработка движения при полете
RunService.RenderStepped:Connect(function()
    if isFlyActive then
        local Character = Player.Character
        local RootPart = Character and Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = Character and Character:FindFirstChild("Humanoid")

        if RootPart and Humanoid then
            Humanoid:ChangeState("Physics")
            BodyGyro.CFrame = Camera.CFrame

            local direction = calculateDirection()
            if direction == Vector3.zero then
                Flymoving.Value = false
                BodyVelocity.Velocity = Vector3.zero
            else
                Flymoving.Value = true
                TweenService:Create(BodyVelocity, TweenInfo.new(0.1), {Velocity = direction * 100}):Play()
            end
        end
    end
end)

-- Обработка респауна персонажа
Player.CharacterAdded:Connect(function(Character)
    local Humanoid = Character:WaitForChild("Humanoid")
    Humanoid.Died:Connect(function()
        wait(1)
        updateWalkSpeed(currentSpeed)
        updateJumpPower(currentJump)
        toggleNoClip(isNoClipActive)
        toggleFly(isFlyActive)
    end)
end)

-- GUI настройки
PlayerTab:CreateInput({
    Name = "WalkSpeed",
    PlaceholderText = "Enter WalkSpeed",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        updateWalkSpeed(Value)
    end
})

PlayerTab:CreateInput({
    Name = "JumpPower",
    PlaceholderText = "Enter JumpPower",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        updateJumpPower(Value)
    end
})

PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(State)
        toggleInfinityJump(State)
    end
})

PlayerTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(State)
        toggleNoClip(State)
    end
})

PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(State)
        toggleFly(State)
    end
})

MainTab:CreateButton({
    Name = "Example Button",
    Callback = function()
        Rayfield:Notify({
            Title = "Button Clicked",
            Content = "This is an example button from the Main tab!",
            Duration = 5
        })
    end
})

    end
})
