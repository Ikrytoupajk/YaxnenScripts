local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local KeyCode = Enum.KeyCode.E -- Клавиша для включения/выключения полёта
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera

local BodyVelocity = Instance.new("BodyVelocity")
BodyVelocity.MaxForce = Vector3.new(100000000, 100000000, 100000000)
BodyVelocity.P = 20000
BodyVelocity.Velocity = Vector3.zero

local BodyGyro = Instance.new("BodyGyro")
BodyGyro.D = 500
BodyGyro.P = 3000
BodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)

local Flying = false
local Flymoving = Instance.new("BoolValue", script) -- Состояние движения
Flymoving.Name = "Flymoving"

-- Функция для вычисления направления
local function calculateDirection()
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChild("Humanoid")
    if not Humanoid or Humanoid.MoveDirection == Vector3.zero then
        return Vector3.zero
    end

    -- Направление камеры
    local camDir = Camera.CFrame.LookVector
    local moveDir = Humanoid.MoveDirection
    local flatCamDir = Vector3.new(camDir.X, 0, camDir.Z).Unit

    -- Направление движения с учётом камеры
    return (flatCamDir * moveDir.Z + Camera.CFrame.RightVector * moveDir.X).Unit
end

-- Функция для включения/выключения полёта
local function toggleFly()
    Flying = not Flying
    if Flying then
        -- Включение полёта
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
        Humanoid:ChangeState(Enum.HumanoidStateType.Physics)

        BodyVelocity.Parent = Character.HumanoidRootPart
        BodyGyro.Parent = Character.HumanoidRootPart
    else
        -- Выключение полёта
        Flymoving.Value = false
        BodyVelocity:Destroy()
        BodyGyro:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    end
end

-- Обработка нажатия клавиши
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == KeyCode then
        toggleFly()
    end
end)

-- Обработка движения при полёте
RunService.RenderStepped:Connect(function()
    if Flying then
        local Character = Player.Character
        local RootPart = Character and Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = Character and Character:FindFirstChild("Humanoid")

        if RootPart and Humanoid then
            Humanoid:ChangeState("Physics")
            BodyGyro.CFrame = Camera.CFrame -- Устанавливаем направление взгляда камеры

            local direction = calculateDirection()
            if direction == Vector3.zero then
                Flymoving.Value = false
                BodyVelocity.Velocity = Vector3.zero
            else
                Flymoving.Value = true
                TweenService:Create(BodyVelocity, TweenInfo.new(0.1), {Velocity = direction * 100}):Play()
            end
        end
    end
end)

-- Rayfield интерфейс
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Click Simulator",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Default",
    ConfigurationSaving = {
        Enabled = true,
        FileName = "Big Hub"
    },
    KeySystem = false
})

-- Переменные для управления
local currentSpeed = 16
local currentJump = 50
local isWallSpeedActive = false
local isJumpPowerActive = false
local isInfinityJumpActive = false
local isNoClipActive = false
local isFlyActive = false
local bodyVelocity = nil

-- Создаём вкладки
local PlayerTab = Window:CreateTab("Player")
local MainTab = Window:CreateTab("Main")

-- Функция для изменения WalkSpeed
local function updateWalkSpeed(newSpeed)
    if Player.Character and Player.Character:FindFirstChild("Humanoid") then
        local humanoid = Player.Character.Humanoid
        currentSpeed = humanoid.WalkSpeed
        humanoid.WalkSpeed = tonumber(newSpeed) or currentSpeed
    end
end

-- Функция для изменения JumpPower
local function updateJumpPower(newJump)
    if Player.Character and Player.Character:FindFirstChild("Humanoid") then
        local humanoid = Player.Character.Humanoid
        currentJump = humanoid.JumpPower
        humanoid.JumpPower = tonumber(newJump) or currentJump
    end
end

-- Функция для активации/деактивации NoClip
local function toggleNoClip(state)
    isNoClipActive = state

    local character = Player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            -- Включаем или выключаем NoClip
            if isNoClipActive then
                humanoid.PlatformStand = true -- Отключаем физику
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false -- Отключаем столкновения
                    end
                end
            else
                humanoid.PlatformStand = false -- Включаем физику
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true -- Включаем столкновения
                    end
                end
            end
        end
    end
end

-- Функция для активации/деактивации полета
local function toggleFly(state)
    isFlyActive = state
    local character = Player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        if isFlyActive then
            -- Создаем BodyVelocity для полета
            if rootPart then
                bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(400000, 400000, 400000)  -- Максимальная сила для движения
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)  -- Начальная скорость
                bodyVelocity.P = 10000  -- Дельта сила
                bodyVelocity.Parent = rootPart
            end
        else
            -- Отключаем полет и удаляем BodyVelocity
            if bodyVelocity then
                bodyVelocity:Destroy()
                bodyVelocity = nil
            end
        end
    end
end

-- Сохраняем данные после смерти
local function onCharacterAdded(character)
    -- Восстанавливаем настройки после респауна
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        -- Восстановить настройки при смерти персонажа
        wait(1) -- Немного задержки для восстановления
        updateWalkSpeed(currentSpeed)
        updateJumpPower(currentJump)
        toggleNoClip(isNoClipActive)
        toggleFly(isFlyActive)
    end)

    -- Инициализация настроек при первом появлении
    updateWalkSpeed(currentSpeed)
    updateJumpPower(currentJump)
    toggleNoClip(isNoClipActive)
    toggleFly(isFlyActive)
end

-- Обработка респауна персонажа
Player.CharacterAdded:Connect(onCharacterAdded)

-- Текстовое поле для WalkSpeed
local WalkSpeedInput = PlayerTab:CreateInput({
    Name = "WalkSpeed",
    PlaceholderText = "Enter WalkSpeed",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        currentSpeed = Value
        updateWalkSpeed(Value)
    end
})

-- Текстовое поле для JumpPower
local JumpPowerInput = PlayerTab:CreateInput({
    Name = "JumpPower",
    PlaceholderText = "Enter JumpPower",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        currentJump = Value
        updateJumpPower(Value)
    end
})

-- Кнопка с галочкой для бесконечного прыжка
local InfinityJumpToggle = PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false, -- Начальное состояние - выключено
    Flag = "infinityjump_toggle",
    Callback = function(State)
        isInfinityJumpActive = State

        if isInfinityJumpActive then
            -- Активируем бесконечный прыжок
            game:GetService('UserInputService').JumpRequest:Connect(function()
                if isInfinityJumpActive then
                    local humanoid = Player.Character and Player.Character:FindFirstChildOfClass('Humanoid')
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                    end
                end
            end)
        end
    end
})
